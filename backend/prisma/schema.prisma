generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  username          String             @id @unique @map("username") @db.VarChar(255)
  email             String             @unique @map("email") @db.VarChar(255)
  password          String             @map("password") @db.VarChar(255)
  firstName         String?            @map("first_name") @db.VarChar(255)
  lastName          String?            @map("last_name") @db.VarChar(255)
  role              String             @default("student") @map("role") @db.VarChar(50)
  twoFactorEnabled  Boolean            @default(false) @map("two_factor_enabled")
  lastLogin         DateTime?          @map("last_login")
  active            Boolean            @default(true) @map("active")
  currentSessionId  String?            @map("current_session_id") @db.VarChar(255)
  sessionExpiry     DateTime?          @map("session_expiry")
  loginCount        Int                @default(0) @map("login_count")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  academicCalendars AcademicCalendar[]
  students          Student?
  teachers          Teacher?

  @@map("users")
}

model Student {
  studentId        String       @id @default(dbgenerated("nextval('students_student_id_seq'::regclass)")) @map("student_id") @db.VarChar(255)
  name             String       @map("name") @db.VarChar(255)
  address          String?
  email            String       @unique @map("email") @db.VarChar(255)
  phone            String?      @map("phone") @db.VarChar(20)
  dateOfBirth      DateTime?    @map("date_of_birth")
  fatherName       String?      @map("father_name") @db.VarChar(255)
  fatherOccupation String?      @map("father_occupation") @db.VarChar(255)
  motherName       String?      @map("mother_name") @db.VarChar(255)
  motherOccupation String?      @map("mother_occupation") @db.VarChar(255)
  parentContact    String?      @map("parent_contact") @db.VarChar(20)
  classId          Int?         @map("class_id")
  admissionDate    DateTime?    @map("admission_date")
  status           String       @default("active") @map("status") @db.VarChar(20)
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")
  attendances      Attendance[]
  fees             Fee[]
  marks            Mark[]
  class            Class?       @relation(fields: [classId], references: [classId])
  users            User         @relation(fields: [studentId], references: [username], onDelete: NoAction, onUpdate: NoAction)

  @@map("students")
}

model Teacher {
  name               String     @map("name") @db.VarChar(255)
  email              String     @unique @map("email") @db.VarChar(255)
  phoneNumber        String?    @map("phone_number") @db.VarChar(20)
  qualification      String?
  subjectsHandled    String[]   @map("subjects_handled")
  classesAssigned    String[]   @map("classes_assigned")
  classTeacherOf     String?    @map("class_teacher_of") @db.VarChar(50)
  hireDate           DateTime?  @map("hire_date")
  salary             Decimal?   @db.Decimal(10, 2)
  active             Boolean    @default(true) @map("active")
  createdAt          DateTime   @default(now()) @map("created_at")
  updatedAt          DateTime   @updatedAt @map("updated_at")
  qualified_subjects String[]
  teacherId          String     @id @map("teacher_id") @db.VarChar(255)
  classesTeaching    Class[]
  marks              Mark[]
  syllabi            Syllabus[]
  users              User       @relation(fields: [teacherId], references: [username], onDelete: NoAction, onUpdate: NoAction)

  @@map("teachers")
}

model Class {
  classId        Int          @id @map("class_id")
  className      String       @map("class_name") @db.VarChar(50)
  section        String       @map("section") @db.VarChar(10)
  classTeacherId String?      @map("class_teacher_id") @db.VarChar(255)
  academicYear   String       @map("academic_year") @db.VarChar(20)
  maxStudents    Int?         @map("max_students")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  active         Boolean      @default(true) @map("active")
  attendances    Attendance[]
  classTeacher   Teacher?     @relation(fields: [classTeacherId], references: [teacherId], onDelete: NoAction, onUpdate: NoAction)
  fees           Fee[]
  marks          Mark[]
  students       Student[]
  syllabi        Syllabus[]

  @@map("classes")
}

model Subject {
  subjectName     String     @map("subject_name") @db.VarChar(100)
  subjectCode     String     @id @map("subject_code") @db.VarChar(20)
  classApplicable String     @map("class_applicable") @db.VarChar(50)
  maxMarksPerExam Int        @map("max_marks_per_exam")
  isActive        Boolean    @default(true) @map("is_active")
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  marks           Mark[]
  syllabi         Syllabus[]

  @@map("subjects")
}

model CalendarGrid {
  gridId                  String    @id @map("grid_id") @db.VarChar
  classId                 Int       @map("class_id")
  calendarDate            DateTime  @map("calendar_date") @db.Date
  morningSlots            String?   @map("morning_slots")
  afternoonSlots          String?   @map("afternoon_slots")
  dayOfWeek               Int       @map("day_of_week")
  academicYear            String    @map("academic_year") @db.VarChar(20)
  dayType                 String    @default("working") @map("day_type") @db.VarChar(20)
  holidayName             String?   @map("holiday_name") @db.VarChar(100)
  createdAt               DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt               DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  morning_subject_codes   String?
  afternoon_subject_codes String?
  examType                String?   @map("exam_type") @db.VarChar(20)
  examSession             String?   @map("exam_session") @db.VarChar(20)

  @@map("calendar_grid")
}

model ScheduleData {
  scheduleId   String    @id @map("schedule_id") @db.VarChar(100)
  classId      Int       @map("class_id")
  academicYear String    @map("academic_year") @db.VarChar(20)
  isTemplate   Boolean?  @default(false) @map("is_template")
  dayOfWeek    Int?      @map("day_of_week")
  templateName String?   @map("template_name") @db.VarChar(100)
  subjectCode  String?   @map("subject_code") @db.VarChar(100)
  teacherId    String?   @map("teacher_id") @db.VarChar(255)
  slotIds      String?   @map("slot_ids")
  slotNames    String?   @map("slot_names")
  startTime    DateTime? @map("start_time") @db.Time(6)
  endTime      DateTime? @map("end_time") @db.Time(6)
  isActive     Boolean?  @default(true) @map("is_active")
  createdBy    String?   @map("created_by") @db.VarChar(255)
  createdAt    DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@unique([teacherId, academicYear, dayOfWeek, startTime, endTime], map: "unique_teacher_time_slot")
  @@map("schedule_data")
}

model Attendance {
  attendanceId String   @id @map("attendance_id") @db.VarChar(50)
  studentId    String   @map("student_id") @db.VarChar(255)
  classId      Int      @map("class_id")
  date         DateTime @map("date")
  period       Int      @map("period")
  status       String   @map("status") @db.VarChar(20)
  markedBy     String   @map("marked_by") @db.VarChar(255)
  timestamp    DateTime @default(now()) @map("timestamp")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  scheduleId   String?  @map("schedule_id") @db.VarChar(100)
  subjectCode  String?  @map("subject_code") @db.VarChar(20)
  class        Class    @relation(fields: [classId], references: [classId])
  student      Student  @relation(fields: [studentId], references: [studentId], onDelete: NoAction, onUpdate: NoAction)

  @@map("attendance")
}

model Mark {
  marksId         String   @id @map("marks_id") @db.VarChar(50)
  studentId       String   @map("student_id") @db.VarChar(255)
  classId         Int      @map("class_id")
  examinationType String   @map("examination_type") @db.VarChar(20)
  marksObtained   Int      @map("marks_obtained")
  maxMarks        Int      @map("max_marks")
  grade           String?  @map("grade") @db.VarChar(5)
  entryDate       DateTime @map("entry_date")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  subjectCode     String?  @map("subject_code") @db.VarChar(20)
  teacherId       String?  @map("teacher_id") @db.VarChar(255)
  class           Class    @relation(fields: [classId], references: [classId])
  student         Student  @relation(fields: [studentId], references: [studentId], onDelete: NoAction, onUpdate: NoAction)
  subject         Subject? @relation(fields: [subjectCode], references: [subjectCode], onDelete: NoAction, onUpdate: NoAction)
  teacher         Teacher? @relation(fields: [teacherId], references: [teacherId], onDelete: NoAction, onUpdate: NoAction)

  @@map("marks")
}

model Fee {
  feeId         String    @id @default(dbgenerated("nextval('fees_fee_id_seq'::regclass)")) @map("fee_id") @db.VarChar(100)
  studentId     String    @map("student_id") @db.VarChar(255)
  classId       Int       @map("class_id")
  feeType       String    @map("fee_type") @db.VarChar(50)
  amountDue     Decimal   @map("amount_due") @db.Decimal(10, 2)
  amountPaid    Decimal   @map("amount_paid") @db.Decimal(10, 2)
  paymentDate   DateTime? @map("payment_date")
  paymentMethod String?   @map("payment_method") @db.VarChar(50)
  balance       Decimal   @db.Decimal(10, 2)
  academicYear  String    @map("academic_year") @db.VarChar(20)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  updatedBy     String?   @map("updated_by") @db.VarChar(255)
  class         Class     @relation(fields: [classId], references: [classId])
  student       Student   @relation(fields: [studentId], references: [studentId], onDelete: NoAction, onUpdate: NoAction)

  @@map("fees")
}

model Syllabus {
  syllabusId           String   @id @map("syllabus_id") @db.VarChar(50)
  classId              Int      @map("class_id")
  unitName             String   @map("unit_name") @db.VarChar(255)
  completionStatus     String   @map("completion_status") @db.VarChar(20)
  completionPercentage Int      @map("completion_percentage")
  current_topic        String?
  lastUpdated          DateTime @map("last_updated")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")
  subjectCode          String?  @map("subject_code") @db.VarChar(20)
  teacherId            String?  @map("teacher_id") @db.VarChar(255)
  subTopics            String[] @default([]) @map("sub_topics")
  completedSubTopics   String[] @default([]) @map("completed_sub_topics")
  class                Class    @relation(fields: [classId], references: [classId])
  subject              Subject? @relation(fields: [subjectCode], references: [subjectCode], onDelete: NoAction, onUpdate: NoAction)
  teacher              Teacher? @relation(fields: [teacherId], references: [teacherId], onDelete: NoAction, onUpdate: NoAction)

  @@map("syllabus")
}

model AcademicCalendar {
  calendarId       Int      @id @default(autoincrement()) @map("calendar_id")
  academicYear     String   @map("academic_year") @db.VarChar(20)
  startDate        DateTime @map("start_date")
  endDate          DateTime @map("end_date")
  holidays         Json?    @map("holidays")
  examinationDates Json?    @map("examination_dates")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  createdBy        String?  @map("created_by") @db.VarChar(255)
  creator          User?    @relation(fields: [createdBy], references: [username], onDelete: NoAction, onUpdate: NoAction)

  @@map("academic_calendar")
}
