// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// USER MANAGEMENT
// ============================================================================

model User {
  username         String    @id @map("username")
  email            String    @unique @map("email")
  password         String    @map("password")
  firstName        String?   @map("first_name")
  lastName         String?   @map("last_name")
  role             String    @map("role")
  twoFactorEnabled Boolean   @default(false) @map("two_factor_enabled")
  lastLogin        DateTime? @map("last_login")
  active           Boolean   @map("active")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  attendances        Attendance[]
  academicCalendars  AcademicCalendar[]
  scheduleExceptions ScheduleException[]

  @@map("users")
}

// ============================================================================
// CORE ACADEMIC ENTITIES
// ============================================================================

model Student {
  studentId        String    @id @map("student_id")
  name             String    @map("name")
  address          String?   @db.Text
  email            String    @unique @map("email")
  phone            String?   @map("phone")
  dateOfBirth      DateTime? @map("date_of_birth")
  fatherName       String?   @map("father_name")
  fatherOccupation String?   @map("father_occupation")
  motherName       String?   @map("mother_name")
  motherOccupation String?   @map("mother_occupation")
  parentContact    String?   @map("parent_contact")
  classId          Int?      @map("class_id")
  admissionDate    DateTime? @map("admission_date")
  status           String    @map("status")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  class       Class?       @relation(fields: [classId], references: [classId])
  attendances Attendance[]
  marks       Mark[]
  fees        Fee[]

  @@map("students")
}

model Teacher {
  teacherId       String    @id @map("teacher_id")
  name            String    @map("name")
  email           String    @unique @map("email")
  phoneNumber     String?   @map("phone_number")
  qualification   String?   @db.Text
  subjectsHandled String[]  @map("subjects_handled")
  classesAssigned String[]  @map("classes_assigned")
  classTeacherOf  String?   @map("class_teacher_of")
  hireDate        DateTime? @map("hire_date")
  salary          Decimal?  @db.Decimal(10, 2)
  active          Boolean   @map("active")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  classesTeaching    Class[]
  marks              Mark[]
  syllabi            Syllabus[]
  classSchedules     ClassSchedule[]
  scheduleExceptions ScheduleException[]

  @@map("teachers")
}

model Class {
  classId        Int      @id @map("class_id")
  className      String   @map("class_name")
  section        String   @map("section")
  classTeacherId String?  @map("class_teacher_id")
  academicYear   String   @map("academic_year")
  maxStudents    Int?     @map("max_students")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  classTeacher       Teacher?            @relation(fields: [classTeacherId], references: [teacherId])
  students           Student[]
  attendances        Attendance[]
  marks              Mark[]
  fees               Fee[]
  syllabi            Syllabus[]
  classSchedules     ClassSchedule[]
  scheduleExceptions ScheduleException[]

  @@map("classes")
}

model Subject {
  subjectName     String   @map("subject_name")
  subjectCode     String   @id @map("subject_code")
  classApplicable String   @map("class_applicable")
  maxMarksPerExam Int      @map("max_marks_per_exam")
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  marks              Mark[]
  syllabi            Syllabus[]
  classSchedules     ClassSchedule[]
  scheduleExceptions ScheduleException[]

  @@map("subjects")
}

// ============================================================================
// SCHEDULING SYSTEM
// ============================================================================

model TimeSlot {
  slotId    String   @id @map("slot_id")
  slotName  String   @map("slot_name")
  startTime String   @map("start_time") // TIME stored as string
  endTime   String   @map("end_time") // TIME stored as string
  slotOrder Int      @map("slot_order")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  classSchedules     ClassSchedule[]
  scheduleExceptions ScheduleException[]

  @@map("time_slots")
}

model ClassSchedule {
  scheduleId   String   @id @map("schedule_id")
  classId      Int      @map("class_id")
  dayOfWeek    Int      @map("day_of_week")
  slotId       String   @map("slot_id")
  academicYear String   @map("academic_year")
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  subjectCode  String?  @map("subject_code")
  teacherId    String?  @map("teacher_id")

  // Relations
  class       Class        @relation(fields: [classId], references: [classId])
  timeSlot    TimeSlot     @relation(fields: [slotId], references: [slotId])
  subject     Subject?     @relation(fields: [subjectCode], references: [subjectCode])
  teacher     Teacher?     @relation(fields: [teacherId], references: [teacherId])
  attendances Attendance[]

  @@map("class_schedule")
}

// ============================================================================
// ACADEMIC RECORDS
// ============================================================================

model Attendance {
  attendanceId BigInt   @id @map("attendance_id")
  studentId    String   @map("student_id")
  classId      Int      @map("class_id")
  date         DateTime @map("date")
  period       Int      @map("period")
  status       String   @map("status")
  markedBy     String   @map("marked_by")
  timestamp    DateTime @map("timestamp")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  scheduleId   String?  @map("schedule_id")
  meaningfulId String?  @map("meaningful_id")

  // Relations
  student      Student        @relation(fields: [studentId], references: [studentId])
  class        Class          @relation(fields: [classId], references: [classId])
  markedByUser User           @relation(fields: [markedBy], references: [username])
  schedule     ClassSchedule? @relation(fields: [scheduleId], references: [scheduleId])

  @@map("attendance")
}

model Mark {
  marksId         String   @id @map("marks_id")
  studentId       String   @map("student_id")
  classId         Int      @map("class_id")
  examinationType String   @map("examination_type")
  marksObtained   Int      @map("marks_obtained")
  maxMarks        Int      @map("max_marks")
  grade           String?  @map("grade")
  entryDate       DateTime @map("entry_date")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  subjectCode     String?  @map("subject_code")
  teacherId       String?  @map("teacher_id")

  // Relations
  student Student  @relation(fields: [studentId], references: [studentId])
  class   Class    @relation(fields: [classId], references: [classId])
  subject Subject? @relation(fields: [subjectCode], references: [subjectCode])
  teacher Teacher? @relation(fields: [teacherId], references: [teacherId])

  @@map("marks")
}

model Fee {
  feeId         String    @id @map("fee_id")
  studentId     String    @map("student_id")
  classId       Int       @map("class_id")
  feeType       String    @map("fee_type")
  amountDue     Decimal   @map("amount_due") @db.Decimal(10, 2)
  amountPaid    Decimal   @map("amount_paid") @db.Decimal(10, 2)
  paymentDate   DateTime? @map("payment_date")
  paymentMethod String?   @map("payment_method")
  balance       Decimal   @db.Decimal(10, 2)
  academicYear  String    @map("academic_year")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  student Student @relation(fields: [studentId], references: [studentId])
  class   Class   @relation(fields: [classId], references: [classId])

  @@map("fees")
}

model Syllabus {
  syllabusId           String   @id @map("syllabus_id")
  classId              Int      @map("class_id")
  unitName             String   @map("unit_name")
  completionStatus     String   @map("completion_status")
  completionPercentage Int      @map("completion_percentage")
  currentTopic         String?  @db.Text
  lastUpdated          DateTime @map("last_updated")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")
  subjectCode          String?  @map("subject_code")
  teacherId            String?  @map("teacher_id")

  // Relations
  class   Class    @relation(fields: [classId], references: [classId])
  subject Subject? @relation(fields: [subjectCode], references: [subjectCode])
  teacher Teacher? @relation(fields: [teacherId], references: [teacherId])

  @@map("syllabus")
}

// ============================================================================
// ADMINISTRATIVE
// ============================================================================

model AcademicCalendar {
  calendarId       Int      @id @map("calendar_id")
  academicYear     String   @map("academic_year")
  startDate        DateTime @map("start_date")
  endDate          DateTime @map("end_date")
  holidays         Json?    @map("holidays")
  examinationDates Json?    @map("examination_dates")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  createdBy        String   @map("created_by")

  // Relations
  creator User @relation(fields: [createdBy], references: [username])

  @@map("academic_calendar")
}

model ScheduleException {
  exceptionId       String   @id @map("exception_id")
  exceptionDate     DateTime @map("exception_date") @db.Date
  exceptionType     String   @map("exception_type")
  title             String   @map("title")
  description       String?  @db.Text
  academicYear      String   @map("academic_year")
  affectsAllClasses Boolean  @default(false) @map("affects_all_classes")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  classId           Int?     @map("class_id")
  slotId            String?  @map("slot_id")
  subjectCode       String?  @map("subject_code")
  teacherId         String?  @map("teacher_id")
  createdBy         String   @map("created_by")

  // Relations
  class    Class?    @relation(fields: [classId], references: [classId])
  timeSlot TimeSlot? @relation(fields: [slotId], references: [slotId])
  subject  Subject?  @relation(fields: [subjectCode], references: [subjectCode])
  teacher  Teacher?  @relation(fields: [teacherId], references: [teacherId])
  creator  User      @relation(fields: [createdBy], references: [username])

  @@map("schedule_exceptions")
}
