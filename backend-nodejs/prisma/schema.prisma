// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        BigInt   @id @default(autoincrement())
  username  String   @unique @db.VarChar(255)
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  firstName String?  @map("first_name") @db.VarChar(255)
  lastName  String?  @map("last_name") @db.VarChar(255)
  role      String   @default("student") @db.VarChar(50) // student, teacher, admin
  twoFactorEnabled Boolean @default(false) @map("two_factor_enabled")
  lastLogin DateTime? @map("last_login")
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  student   Student?
  teacher   Teacher?
  academicCalendars AcademicCalendar[]

  @@map("users")
}

model Student {
  id          BigInt   @id @default(autoincrement()) @map("student_id")
  userId      BigInt   @unique @map("user_id")
  name        String   @db.VarChar(255)
  address     String?  @db.Text
  email       String   @unique @db.VarChar(255)
  phone       String?  @db.VarChar(20)
  dateOfBirth DateTime? @map("date_of_birth")
  parentName  String?  @map("parent_name") @db.VarChar(255)
  parentContact String? @map("parent_contact") @db.VarChar(20)
  classId     Int?     @map("class_id")
  section     String?  @db.VarChar(10)
  admissionDate DateTime? @map("admission_date")
  status      String   @default("active") @db.VarChar(20)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  class       Class?   @relation(fields: [classId], references: [classId])
  attendance  Attendance[]
  marks       Mark[]
  fees        Fee[]

  @@map("students")
}

model Teacher {
  id            BigInt   @id @default(autoincrement()) @map("teacher_id")
  userId        BigInt   @unique @map("user_id")
  name          String   @db.VarChar(255)
  email         String   @unique @db.VarChar(255)
  phoneNumber   String?  @map("phone_number") @db.VarChar(20)
  qualification String?  @db.Text
  subjectsHandled String[] @map("subjects_handled")
  classesAssigned String[] @map("classes_assigned")
  classTeacherOf String?  @map("class_teacher_of") @db.VarChar(50)
  hireDate      DateTime? @map("hire_date")
  salary        Decimal?  @db.Decimal(10,2)
  active        Boolean  @default(true)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  classesTeaching Class[]
  attendance    Attendance[]
  marks         Mark[]
  syllabus      Syllabus[]

  @@map("teachers")
}

model Class {
  classId     Int      @id @map("class_id")
  className   String   @map("class_name") @db.VarChar(50)
  section     String   @db.VarChar(10)
  classTeacherId BigInt? @map("class_teacher_id")
  academicYear String  @map("academic_year") @db.VarChar(20)
  maxStudents Int?     @map("max_students")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  classTeacher Teacher? @relation(fields: [classTeacherId], references: [id])
  students     Student[]
  attendance   Attendance[]
  marks        Mark[]
  fees         Fee[]
  syllabus     Syllabus[]

  @@map("classes")
}

model Subject {
  subjectId     Int      @id @map("subject_id")
  subjectName   String   @map("subject_name") @db.VarChar(100)
  subjectCode   String?  @map("subject_code") @db.VarChar(20)
  classApplicable String @map("class_applicable") @db.VarChar(50)
  maxMarksPerExam Int    @map("max_marks_per_exam")
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  marks        Mark[]
  syllabus     Syllabus[]

  @@map("subjects")
}

model Attendance {
  attendanceId BigInt   @id @default(autoincrement()) @map("attendance_id")
  studentId    BigInt   @map("student_id")
  classId      Int      @map("class_id")
  date         DateTime
  period       Int
  status       String   @db.VarChar(20) // present, absent, late
  markedBy     BigInt   @map("marked_by")
  timestamp    DateTime @default(now())
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  student      Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class        Class    @relation(fields: [classId], references: [classId])
  teacher      Teacher  @relation(fields: [markedBy], references: [id])

  @@map("attendance")
}

model Mark {
  marksId         BigInt   @id @default(autoincrement()) @map("marks_id")
  studentId       BigInt   @map("student_id")
  classId         Int      @map("class_id")
  subjectId       Int      @map("subject_id")
  examinationType String   @map("examination_type") @db.VarChar(20)
  marksObtained   Int      @map("marks_obtained")
  maxMarks        Int      @map("max_marks")
  grade           String?  @db.VarChar(5)
  teacherId       BigInt   @map("teacher_id")
  entryDate       DateTime @map("entry_date")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  student         Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class           Class    @relation(fields: [classId], references: [classId])
  subject         Subject  @relation(fields: [subjectId], references: [subjectId])
  teacher         Teacher  @relation(fields: [teacherId], references: [id])

  @@map("marks")
}

model Fee {
  feeId         BigInt    @id @default(autoincrement()) @map("fee_id")
  studentId     BigInt    @map("student_id")
  classId       Int       @map("class_id")
  feeType       String    @map("fee_type") @db.VarChar(50)
  amountDue     Decimal   @map("amount_due") @db.Decimal(10,2)
  amountPaid    Decimal   @map("amount_paid") @db.Decimal(10,2)
  paymentDate   DateTime? @map("payment_date")
  paymentMethod String?   @map("payment_method") @db.VarChar(50)
  balance       Decimal   @db.Decimal(10,2)
  academicYear  String    @map("academic_year") @db.VarChar(20)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  student       Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class         Class     @relation(fields: [classId], references: [classId])

  @@map("fees")
}

model Syllabus {
  syllabusId         Int      @id @default(autoincrement()) @map("syllabus_id")
  classId            Int      @map("class_id")
  subjectId          Int      @map("subject_id")
  unitName           String   @map("unit_name") @db.VarChar(255)
  completionStatus   String   @map("completion_status") @db.VarChar(20) // completed, in_progress, not_started
  completionPercentage Int    @map("completion_percentage")
  currentTopic       String?  @map("current_topic") @db.Text
  teacherId          BigInt   @map("teacher_id")
  lastUpdated        DateTime @map("last_updated")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  // Relations
  class             Class    @relation(fields: [classId], references: [classId])
  subject           Subject  @relation(fields: [subjectId], references: [subjectId])
  teacher           Teacher  @relation(fields: [teacherId], references: [id])

  @@map("syllabus")
}

model AcademicCalendar {
  calendarId       Int      @id @default(autoincrement()) @map("calendar_id")
  academicYear     String   @map("academic_year") @db.VarChar(20)
  startDate        DateTime @map("start_date")
  endDate          DateTime @map("end_date")
  holidays         Json?    // JSON format for holidays
  examinationDates Json?    @map("examination_dates") // JSON format for exam dates
  createdBy        BigInt   @map("created_by")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  creator          User     @relation(fields: [createdBy], references: [id])

  @@map("academic_calendar")
}
